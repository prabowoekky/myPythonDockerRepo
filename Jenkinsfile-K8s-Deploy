pipeline {
    agent any
        environment {
        //once you sign up for Docker hub, use that user_id here
        registry = "kube"
        //- update your credentials ID after creating credentials for connecting to Docker Hub
        registryCredential = 'acr-credentials'
        registryUrl = 'azureaksdrc.azurecr.io'
        dockerImage = ''
        CTX_CLUSTER1 = 'eq-aksDC'
        CTX_CLUSTER2 = 'azure-aksDRC'
    }
    stages {

        stage ('checkout') {
            steps {
            checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/prabowoekky/myPythonDockerRepo.git']]])
            }
        }
       
        stage ('Build docker image') {
            steps {
                script {
                dockerImage = docker.build registry + ":$BUILD_NUMBER"
                //dockerImage = docker.build registry + ":$BUILD_NUMBER"

                }
            }
        }
       
         // Uploading Docker images into Docker Hub
    stage('Upload Image') {
     steps{   
         script {
            docker.withRegistry( "http://${registryUrl}", registryCredential ) {
            dockerImage.push()
            }
        }
      }
    }

    stage('Remove Unused docker image') {
      steps{
        sh "docker rmi $registry:$BUILD_NUMBER"
        sh "docker rmi $registryUrl/$registry:$BUILD_NUMBER"
      }
    }
   
    stage ('K8S Deploy DC') {
        steps {
            script {
                echo "test"
                sh 'kubectl --context="${CTX_CLUSTER1}" apply -f k8s-deployment-DC.yaml'
                sh 'kubectl --context="${CTX_CLUSTER1}" set image deployment/my-python-deployment-dc my-python-app-dc=$registryUrl/$registry:$BUILD_NUMBER'
            }
        }
    }
    stage ('K8S Deploy DRC') {
        steps {
            script {
                // sh 'kubectl --context="${CTX_CLUSTER2}" apply -f k8s-deployment-DRC.yaml'
                // sh 'kubectl --context="${CTX_CLUSTER2}" set image deployment/my-python-deployment-drc my-python-app-drc=$registryUrl/$registry:$BUILD_NUMBER'
            }
        }
    }
    stage ('Balancing Service') {
        steps {
            script {
                sh "chmod +x bash-service.sh"
                sh '''#!/bin/bash
                 servicedrc=$(kubectl --context="${CTX_CLUSTER2}" get svc | grep python-app-svc-drc | awk '{print $4}')
                 echo $servicedrc
                 sed -i "s/service-drc/$servicedrc/g" balancing-service.yaml
                 kubectl config use-context eq-aksDC
                 servicedc=$(kubectl --context="${CTX_CLUSTER1}" get svc | grep python-app-svc-dc | awk '{print $4}')
                 echo $servicedc
                 sed -i "s/service-dc/$servicedc/g" balancing-service.yaml
                 kubectl apply -f balancing-service.yaml
                 
                '''
            }
        }
    } 
    }  
}

always {
  // remove built docker image and prune system
  print 'Cleaning up the Docker system.'
  sh 'docker system prune -f'
}
